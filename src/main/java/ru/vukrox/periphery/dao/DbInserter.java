package ru.vukrox.periphery.dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/*
Class used to insert data into DB
Methods:
    -removeAllUnitsFromDB - clears DB before the input pf elements to make sure that DB is empty;
    -generateList - generates an ArrayList of elements for further input into a DB. It uses another method of Class "FillerOfElements";
    -insertList2DB - uses the list generated by the previous method to insert it into the SQL DB;
    -printAllEntities - not used by this programme here. but it can be applied to execute the debugging.
 */

public class DbInserter {

    private static final String SQL_INSERT = "INSERT INTO testtaskdb (field) VALUES (?)";
    private static final String SQL_PRINT = "SELECT * FROM testtaskdb";
    private static final String SQL_REMOVE = "DELETE FROM testtaskdb";

    //the main method to execute input (batch-wise) of the elements into a database
    public static void insertList2DB(List<Integer> list, Connection connection) {
        final int batchSize = list.size();
        Connection conn = connection;
        PreparedStatement preparedStatement = null;

        try {
            preparedStatement = conn.prepareStatement(SQL_INSERT);

            int insertCount = 0;
            for (Integer item : list) {
                preparedStatement.setInt(1, item);
                preparedStatement.addBatch();
                if (++insertCount % batchSize == 0) {
                    preparedStatement.executeBatch();
                }
            }
            preparedStatement.executeBatch();
            System.out.println("Data was added successfully.");
            preparedStatement.close();
        } catch (SQLException sqlExceptionDataInputFailedException) {
            System.out.println("Data input failed.");
            sqlExceptionDataInputFailedException.printStackTrace();
        } finally {
            try {
                preparedStatement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }



    //Support method to print added elements
    private static void printAllEntities(Connection connection) throws SQLException {

        Statement statement = connection.createStatement();
        ResultSet result = statement.executeQuery(SQL_PRINT);

        int count = 0;

        while (result.next()) {
            int field = result.getInt(1);
            System.out.println("Field number " + field + " , value" + ++count);
        }
    }

    //This method is used by the programme in "Main" to clear the DB before inputting the new batch.
    public static void removeAllUnitsFromDB(Connection connection) {
        try {
            Statement statementToDeleteAllUnitsFromTable = connection.createStatement();
            statementToDeleteAllUnitsFromTable.execute(SQL_REMOVE);
            System.out.println("Data was removed from SQL DB (before input) successfully.");
            statementToDeleteAllUnitsFromTable.close();
        } catch (SQLException sqlExceptionWhenDeletingAllRows) {
            System.out.println("Couldn't delete rows.");
            sqlExceptionWhenDeletingAllRows.printStackTrace();
        }
    }
}