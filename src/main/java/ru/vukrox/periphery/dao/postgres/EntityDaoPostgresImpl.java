package ru.vukrox.periphery.dao.postgres;

import ru.vukrox.periphery.dao.EntityDao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
"EntityDaoPostgresImpl" used to insert data into DB
Methods:
    -addEntityList - uses the list generated by the previous method to insert it into the SQL DB;
    -deleteAllEntitiesFromDB - clears DB before the input pf elements to make sure that DB is empty;
    -getDataFromDb - takes data from DB and stores it into a List<> for further processing.
 */

public class EntityDaoPostgresImpl implements EntityDao {

    private static final String SQL_INSERT = "INSERT INTO testtaskdb (field) VALUES (?)";
    private static final String SQL_SELECT = "SELECT field FROM testtaskdb";
    private static final String SQL_REMOVE = "DELETE FROM testtaskdb";

    /**
     * "addEntityList" used to execute input (batch-wise) of the elements into a database.
     */

    public void addEntityList(List<Integer> list, Connection connection) {

        Connection conn = connection;

        try (PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT)) {

            for (int i = 1; i <= list.size(); i++) {
                preparedStatement.setInt(1, i);
                preparedStatement.addBatch();
                if (i % 5000 == 0) {
                    preparedStatement.executeBatch();
                }
            }
            // Additional executeBatch() need for process "tail" from sequence
            preparedStatement.executeBatch();
            System.out.println("Data was added successfully.");

        } catch (SQLException sqlExceptionDataInputFailedException) {
            System.out.println("Data input failed.");
            sqlExceptionDataInputFailedException.printStackTrace();
        }
    }


    /**
     * "deleteAllEntitiesFromDB" is used to clear everything from the DB before the new input.
     */
    public void deleteAllEntitiesFromDB(Connection connection) {
        try {
            Statement statementToDeleteAllUnitsFromTable = connection.createStatement();
            statementToDeleteAllUnitsFromTable.execute(SQL_REMOVE);
            System.out.println("Data was removed from SQL DB (before input) successfully.");
            statementToDeleteAllUnitsFromTable.close();
        } catch (SQLException sqlExceptionWhenDeletingAllRows) {
            System.out.println("Couldn't delete rows.");
            sqlExceptionWhenDeletingAllRows.printStackTrace();
        }
    }

    /**
     * "getDataFromDb" is used to receive data from the DB.It returns data as List<>.
     * The List<> is used later to further store data into the File using XMLOutputFactory and BufferedInputStream.
     */

    @Override
    public List<Integer> getDataFromDb(Connection connection) {
        long start = System.currentTimeMillis();
        List<Integer> resultList = new ArrayList<>();

        try (Statement statement = connection.createStatement()) {
            try (ResultSet resultSet = statement.executeQuery(SQL_SELECT)) {
                while (resultSet.next()) {
                    resultList.add(resultSet.getInt("field"));
                }
            }
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
        long finish = System.currentTimeMillis();
        System.out.println("The data insert took " + ((finish - start) / 1000) + " seconds.");
        return resultList;
    }
}